<?xml version="1.0"?>

<project name="Battlecode Server"
        xmlns:ivy="antlib:org.apache.ivy.ant"
        default="compile">

    <property environment="env"/>

    <property file="build.conf.local"/>

    <condition property="ci.circle">
        <!-- Are we running on CircleCI? -->
        <isset property="env.CIRCLECI"/>
    </condition>

    <property name="rootname" value="battlecode-server"/>
    <property name="src.dir" value="${basedir}/src/main"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="lib.compile.dir" value="${lib.dir}/compile"/>
    <property name="lib.src.dir" value="${lib.dir}/src"/>
    <property name="lib.doc.dir" value="${lib.dir}/doc"/>
    <property name="lib.test.dir" value="${lib.dir}/test"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.encoding" value="UTF-8"/>

    <property name="pkg.build.jar" value="${basedir}/${rootname}.jar"/>
    <property name="pkg.build.dir" value="${build.dir}/classes"/>

    <property name="javac.debug" value="on"/>
    <property name="javac.optimize" value="on"/>
    <property name="javac.deprecation" value="off"/>
    <property name="javac.version" value="1.8"/>
    <property name="javac.args" value=""/>
    <property name="javac.args.warnings" value="-Xlint:unchecked"/>

    <property name="javadoc.common.destdir" value="common-javadoc/"/>
    <property name="javadoc.server.destdir" value="javadoc/"/>

    <!-- Unit tests -->
    <property name="test.src.dir" value="${basedir}/src/test"/>
    <property name="test.timeout" value="900000"/>
    <property name="test.build.dir" value="${build.dir}/tests"/>
    <condition property="test.report.dir" value="${env.CIRCLE_TEST_REPORTS}/junit" else="testreport">
        <!-- If we're running on CircleCI, write out xml junit reports where they want us to. -->
        <isset property="ci.circle"/>
    </condition>

    <!-- IVY configuration items -->
    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.jar.dir" value="${user.home}/.ant/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar"/>
    <available file="${ivy.jar.file}" property="ivy.jar.exists"/>
    <property name="ivy.remote.jar" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"/>

    <!-- the normal classpath for libraries -->
    <path id="classpath-libs">
        <fileset dir="${lib.compile.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- the classpath for testing libraries -->
    <path id="classpath-test-libs">
        <fileset dir="${lib.test.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="classpath-compiled">
        <pathelement location="${pkg.build.dir}"/>
    </path>
  
    <target name="download-ivy" unless="ivy.jar.exists">
        <mkdir dir="${ivy.jar.dir}"/>
        <get dest="${ivy.jar.file}"
                usetimestamp="true"
                src="${ivy.remote.jar}"/>
    </target>

    <target name="init-ivy" depends="download-ivy" unless="ivy.jar.exists">
        <!-- try to load ivy into ant at runtime. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                uri="antlib:org.apache.ivy.ant"
                classpathref="ivy.lib.path"/>
    </target>

    <target name="retrieve" depends="init,init-ivy">
        <ivy:settings file="ivyconf.xml"/>
        <ivy:retrieve pattern="${lib.compile.dir}/[artifact]-[revision].[ext]" conf="compile"/>
        <ivy:retrieve pattern="${lib.src.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="sources"/>
        <ivy:retrieve pattern="${lib.doc.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="javadoc"/>
        <ivy:retrieve pattern="${lib.test.dir}/[artifact]-[revision](-[classifier]).[ext]" conf="test"/>
    </target>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${pkg.build.dir}"/>
        <mkdir dir="${test.build.dir}"/>
        <mkdir dir="${test.report.dir}"/>
    </target>

    <target name="clean"
            description="Clean up build directory.">
        <delete dir="${build.dir}"/>
        <delete dir="${test.report.dir}"/>
        <delete dir="${javadoc.common.destdir}"/>
        <delete dir="${javadoc.server.destdir}"/>
        <delete file="${pkg.build.jar}"/>
    </target>

    <target name="clean-deps">
        <ivy:settings file="ivyconf.xml"/>
        <ivy:cleancache/>
    </target>

    <target name="copy-resources"
            description="Copy inline Battlecode resources to build folder"
            depends="init">
        <copy todir="${pkg.build.dir}">
            <fileset dir="${src.dir}"
                     excludes="**/*.java"/>
        </copy>
    </target>

    <target name="compile"
            description="Compile Battlecode classes."
            depends="init,copy-resources">
        <javac encoding="${build.encoding}"
                srcdir="${src.dir}"
                includes="**/*.java"
                destdir="${pkg.build.dir}"
                debug="${javac.debug}"
                optimize="${javac.optimize}"
                target="${javac.version}"
                source="${javac.version}"
                deprecation="${javac.deprecation}"
                includeantruntime="true">
            <compilerarg line="${javac.args} ${javac.args.warnings}"/>
            <classpath refid="classpath-libs"/>
        </javac>
    </target>

    <target name="compiletest"
            description="Compile test classes."
            depends="init,compile">
        <javac encoding="${build.encoding}"
                srcdir="${test.src.dir}"
                includes="**/*.java"
                destdir="${test.build.dir}"
                debug="${javac.debug}"
                optimize="${javac.optimize}"
                target="${javac.version}"
                source="${javac.version}"
                deprecation="${javac.deprecation}"
                includeantruntime="true">
            <compilerarg line="${javac.args} ${javac.args.warnings}"/>
            <classpath refid="classpath-libs"/>
            <classpath refid="classpath-test-libs"/>
            <classpath>
                <pathelement location="${pkg.build.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="jar"
            description="Build the jar (with dependencies included)."
            depends="compile">
        <jar jarfile="${pkg.build.jar}" basedir="${pkg.build.dir}">
            <zipgroupfileset dir="${lib.compile.dir}" includes="*.jar"/>
        </jar>
    </target>

    <target name="extern" depends="jar" description="Build the jar, then run an external build file.">
        <ant dir="${extern.dir}" target="${extern.target}"/>
    </target>

    <target name="common-doc" depends="compile">
        <javadoc
                sourcepath="${src.dir}"
                packagenames="battlecode.common.*"
                destdir="${javadoc.common.destdir}"
                windowtitle="Battlecode ${year}"
                link="http://docs.oracle.com/javase/8/docs/api/"
				verbose="true">
            <classpath refid="classpath-libs"/>
            <classpath location="${pkg.build.dir}"/>

            <doclet name="com.sun.tools.doclets.standard.Standard">
                <path refid="classpath-libs"/>
                <path location="${pkg.build.dir}"/>
            </doclet>
            <taglet name="battlecode.doc.CostlyMethodTaglet">
                <path refid="classpath-libs"/>
                <path location="${pkg.build.dir}"/>
            </taglet>
            <taglet name="battlecode.doc.RobotTypeTaglet">
                <path refid="classpath-libs"/>
                <path location="${pkg.build.dir}"/>
            </taglet>
        </javadoc>
    </target>

    <target name="doc" depends="common-doc">
        <copy todir="${javadoc.server.destdir}">
            <fileset dir="${javadoc.common.destdir}"/>
        </copy>
        <javadoc destdir="${javadoc.server.destdir}"
                author="true"
                version="true"
                use="true"
                windowtitle="Battlecode Server API">

            <classpath refid="classpath-libs"/>
            <classpath location="${pkg.build.dir}"/>

            <packageset dir="${src.dir}" defaultexcludes="yes">
                <exclude name="battlecode/common/**"/>
                <exclude name="battlecode/doc/**"/>
            </packageset>

            <link href="http://docs.oracle.com/javase/8/docs/api/" />
        </javadoc>
    </target>

    <!-- ========== TESTING ========= -->

    <target name="unittest" depends="compiletest">
        <junit printsummary="withOutAndErr" timeout="${test.timeout}" filtertrace="off"
            failureproperty="test.failed" fork="true" forkmode="once">
            <classpath refid="classpath-libs"/>
            <classpath refid="classpath-test-libs"/>
            <classpath>
                <pathelement location="${pkg.build.dir}"/>
            </classpath>
            <classpath>
                <pathelement location="${test.build.dir}"/>
            </classpath>
            <classpath>
                <pathelement location="${player.build.dir}"/>
            </classpath>

            <assertions>
                <enable package="battlecode"/>
            </assertions>

            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/> <!-- another logger to print output to terminal -->

            <batchtest todir="${test.report.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*.java"/>
                    <exclude name="**/sample/**/*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <fail message="Tests failed" if="test.failed"/>
    </target>

    <target name="test" depends="unittest" />
</project>
